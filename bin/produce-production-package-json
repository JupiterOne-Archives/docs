#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const os = require('os');
const { readMonorepoPackagesForCli } = require('@jupiterone/typescript-tools');

const tools = require('@jupiterone/typescript-tools');

const packageJsonFile = process.argv[2];

if (!packageJsonFile) {
  throw new Error('Missing required package.json file path');
}

async function run() {
  const packageManifest = JSON.parse(
    await fs.readFile(packageJsonFile, { encoding: 'utf8' })
  );

  const rootDir = path.join(__dirname, '..');
  const packages = await readMonorepoPackagesForCli({
    rootDir,
    log: console.log,
  });

  const ourPackages = {};

  const resolutions = (packageManifest.resolutions = {});

  const homeDir = os.homedir();

  for (const curPackage of packages) {
    const { packageName } = curPackage;
    if (
      packageName !== packageManifest.name &&
      packageManifest.dependencies[packageName] !== undefined
    ) {
      const packageVersion = `file:${path.join(
        homeDir,
        '.yalc',
        'packages',
        packageName,
        curPackage.packageManifest.version
      )}`;

      if (packageManifest.dependencies[packageName]) {
        packageManifest.dependencies[packageName] = packageVersion;
      }
      resolutions[packageName] = packageVersion;
    }
  }

  await fs.writeFile(
    './dist/package.json',
    JSON.stringify(packageManifest, null, 2),
    {
      encoding: 'utf8',
    }
  );
}

run().catch((err) => {
  process.exitCode = 1;
  console.error(
    'Error while build production package.json. Error: ' + err.stack
  );
});
